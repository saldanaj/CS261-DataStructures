Assignment 2 / Part 2 Amortized Analysis of the Dynamic Array Date: 10/08/2016 Student: Joaquin Saldana 1. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will double in capacity each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push? Total Units Cost = 8 + 9 + 7 + 17 + 15 = 56 Units Cost Big-oh complexity is O(1)+ 2. How many cost units are spent in the entire process of performing 32 consecutive push operations on an empty array which starts out at capacity 8, assuming that the array will grow by a constant 2 spaces each time a new item is added to an already full dynamic array? As N (ie. the number of pushes) grows large, under this strategy for resizing, what is the big-oh complexity for a push? Total Units Cost = 8 + 9 + 1 + 11 + 1 + 13 + 1 + …. + 31 + 1 = 260 units cost Big-oh complexity is O(n)3. Suppose that a dynamic array stack doubles its capacity when it is full, and shrinks (on Pop only) its capacity by half when the array is half full or less. Can you devise a sequence of N push() and pop() operations which will result in poor performance (O(N^2) total cost)? How might you adjust the array's shrinking policy to avoid this? (Hint: You may assume that the initial capacity of the array is N/2.)For poor performance, (O(N^2)  total cost), to achieve it would probably mean doubling the capacity of the array when full, and then when the size of the array is half of the capacity, if a pop operation is performed (dropping the size to less than half of the capacity of the array, then shrink the array to half its current capacity.  This would create poor performance.  A good way to avoid this is change the shrinking policy to only shrink the array when it’s size is 1/4th of it’s capacity rather than just half.  